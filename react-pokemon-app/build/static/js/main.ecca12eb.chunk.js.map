{"version":3,"sources":["helpers/format-date.ts","helpers/format-type.ts","components/pokemon-card.tsx","models/mock-pokemon.ts","services/pokemon-services.ts","hooks/pokemon-hook.ts","pages/pokemon-list.tsx","pages/pokemon-detail.tsx","pages/page-not-found.tsx","components/pokemon-form.tsx","pages/pokemon-edit.tsx","models/pokemon.ts","pages/pokemon-add.tsx","App.tsx","index.tsx"],"names":["formatDate","date","Date","getDate","getMonth","getUTCFullYear","formatType","type","color","PokemonCard","pokemon","bordelColor","useState","setColor","history","useHistory","className","onClick","id","push","onMouseEnter","onMouseLeave","style","borderColor","src","picture","alt","name","created","types","map","key","POKEMONS","hp","cp","PokemonService","this","isDev","fetch","then","response","json","catch","error","handleError","Promise","resolve","pokemons","data","isEmpty","find","method","body","JSON","stringify","headers","index","findIndex","filter","term","includes","Object","keys","length","console","process","PokemonList","setPokemons","useEffect","PokemonServices","getPokemons","usePokemons","pok","position","bottom","right","to","PokemonsDetail","match","setPokemon","getPokemon","params","width","margin","PageNotFound","PokemonForm","isEditForm","value","isValid","form","setForm","hasType","handleInputChange","e","fieldName","target","fieldValue","newField","isAddForm","validateForm","newForm","startsWith","endsWith","test","isTypesValid","addPokemon","updatePokemon","onSubmit","preventDefault","handleSubmit","deletePokemon","htmlFor","onChange","marginBottom","checked","concat","currentType","selectType","disabled","PokemonEdit","Pokemon","PokemonAdd","getTime","poke","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"0NAIeA,G,MAJI,WAAqC,IAApCC,EAAmC,uDAAvB,IAAIC,KAChC,MAAM,GAAN,OAAUD,EAAKE,UAAf,YAA4BF,EAAKG,WAAW,EAA5C,YAAiDH,EAAKI,oBC4C3CC,EA7CI,SAACC,GAChB,IAAIC,EAEN,OAAQD,GACN,IAAK,MACHC,EAAQ,gBACR,MACF,IAAK,MACHA,EAAQ,iBACR,MACF,IAAK,SACHA,EAAQ,kBACR,MACF,IAAK,UACHA,EAAQ,kBACR,MACF,IAAK,SACHA,EAAQ,iBACR,MACF,IAAK,MACHA,EAAQ,iBACR,MACF,IAAK,SACHA,EAAQ,uBACR,MACF,IAAK,SACHA,EAAQ,iBACR,MACF,IAAK,MACHA,EAAQ,uBACR,MACF,IAAK,WACHA,EAAQ,gBACR,MACF,IAAK,SACHA,EAAQ,cACR,MACF,QACEA,EAAQ,OAIZ,MAAM,QAAN,OAAeA,I,OCaFC,EA3C+B,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,QAAsC,IAA7BC,mBAA6B,MAAf,UAAe,IAExDC,qBAFwD,mBAE3EJ,EAF2E,KAEpEK,EAFoE,KAG5EC,EAAUC,cAchB,OACI,yBAAKC,UAAU,YAAYC,QAAS,kBALnBC,EAKoCR,EAAQQ,QAJ/DJ,EAAQK,KAAR,oBAA0BD,IADR,IAACA,GAKiDE,aAb9C,WACtBP,EAASF,IAY2FU,aAT9E,WACtBR,EAAS,aASL,yBAAKG,UAAU,kBAAkBM,MAAO,CAACC,YAAaf,IAEpD,yBAAKQ,UAAU,cACb,yBAAKQ,IAAKd,EAAQe,QAASC,IAAKhB,EAAQiB,QAG1C,yBAAKX,UAAU,gBAEb,yBAAKA,UAAU,gBAEb,2BAAIN,EAAQiB,MACZ,2BAAG,+BAAQ3B,EAAWU,EAAQkB,WAC7BlB,EAAQmB,MAAMC,KAAI,SAAAvB,GAAI,OACrB,0BAAMwB,IAAKxB,EAAMS,UAAWV,EAAWC,IAAQA,W,gBCqElDyB,EA/GoB,CAClC,CACCd,GAAI,EACJS,KAAM,aACNM,GAAI,GACJC,GAAI,EACJT,QAAS,oEACTI,MAAO,CAAC,SAAU,UAClBD,QAAS,IAAI1B,MAEd,CACCgB,GAAI,EACJS,KAAM,eACNM,GAAI,GACJC,GAAI,EACJT,QAAS,oEACTI,MAAO,CAAC,OACRD,QAAS,IAAI1B,MAEd,CACCgB,GAAI,EACJS,KAAM,WACNM,GAAI,GACJC,GAAI,EACJT,QAAS,oEACTI,MAAO,CAAC,OACRD,QAAS,IAAI1B,MAEd,CACCgB,GAAI,EACJS,KAAM,UACNM,GAAI,GACJC,GAAI,EACJT,QAAS,oEACTI,MAAO,CAAC,UAAW,UACnBD,QAAS,IAAI1B,MAEd,CACCgB,GAAI,EACJS,KAAM,UACNM,GAAI,GACJC,GAAI,EACJT,QAAS,oEACTI,MAAO,CAAC,SAAU,OAClBD,QAAS,IAAI1B,MAEd,CACCgB,GAAI,EACJS,KAAM,UACNM,GAAI,GACJC,GAAI,EACJT,QAAS,oEACTI,MAAO,CAAC,UACRD,QAAS,IAAI1B,MAEd,CACCgB,GAAI,EACJS,KAAM,WACNM,GAAI,GACJC,GAAI,EACJT,QAAS,oEACTI,MAAO,CAAC,SAAU,OAClBD,QAAS,IAAI1B,MAEd,CACCgB,GAAI,EACJS,KAAM,MACNM,GAAI,GACJC,GAAI,EACJT,QAAS,oEACTI,MAAO,CAAC,UACRD,QAAS,IAAI1B,MAEd,CACCgB,GAAI,EACJS,KAAM,UACNM,GAAI,GACJC,GAAI,EACJT,QAAS,oEACTI,MAAO,CAAC,YACRD,QAAS,IAAI1B,MAEd,CACCgB,GAAI,GACJS,KAAM,YACNM,GAAI,GACJC,GAAI,EACJT,QAAS,oEACTI,MAAO,CAAC,UACRD,QAAS,IAAI1B,MAEd,CACCgB,GAAI,GACJS,KAAM,gBACNM,GAAI,GACJC,GAAI,EACJT,QAAS,oEACTI,MAAO,CAAC,UACRD,QAAS,IAAI1B,MAEd,CACCgB,GAAI,GACJS,KAAM,UACNM,GAAI,GACJC,GAAI,EACJT,QAAS,oEACTI,MAAO,CAAC,OACRD,QAAS,IAAI1B,OC1GMiC,E,2GAMuB,IAAD,OACvC,OAAGC,KAAKC,MACCC,MAAM,kCACZC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GAAK,OAAI,EAAKC,YAAYD,MAG5B,IAAIE,SAAQ,SAAAC,GACjBA,EAAQ,EAAKC,e,iCAIC7B,GAAoC,IAAD,OACnD,OAAGkB,KAAKC,MACCC,MAAM,kCAAD,OAAmCpB,IAC9CqB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAS,GAAI,OAAI,EAAKC,QAAQD,GAAQ,KAAOA,KACzCN,OAAM,SAAAC,GAAK,OAAI,EAAKC,YAAYD,MAG5B,IAAIE,SAAQ,SAAAC,GACjBA,EAAQ,EAAKC,SAASG,MAAK,SAAAxC,GAAO,OAAIQ,IAAOR,EAAQQ,Y,oCAIpCR,GAAqC,IAAD,OACvD,OAAG0B,KAAKC,MACCC,MAAM,kCAAD,OAAmC5B,EAAQQ,IAAM,CAC3DiC,OAAQ,MACRC,KAAMC,KAAKC,UAAU5C,GACrB6C,QAAS,CAAE,eAAgB,sBAE5BhB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GAAK,OAAI,EAAKC,YAAYD,MAG5B,IAAIE,SAAQ,SAAAC,GAAY,IACrB5B,EAAOR,EAAPQ,GACFsC,EAAQ,EAAKT,SAASU,WAAU,SAAA/C,GAAO,OAAIA,EAAQQ,KAAOA,KAChE,EAAK6B,SAASS,GAAS9C,EACvBoC,EAAQpC,Q,oCAISA,GAAgC,IAAD,OAClD,OAAG0B,KAAKC,MACCC,MAAM,kCAAD,OAAmC5B,EAAQQ,IAAM,CAC3DiC,OAAQ,SACRI,QAAS,CAAE,eAAgB,sBAE5BhB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GAAK,OAAI,EAAKC,YAAYD,MAG5B,IAAIE,SAAQ,SAAAC,GAAY,IACrB5B,EAAOR,EAAPQ,GACR,EAAK6B,SAAW,EAAKA,SAASW,QAAO,SAAAhD,GAAO,OAAIA,EAAQQ,KAAOA,KAC/D4B,EAAQ,S,iCAIMpC,GAAqC,IAAD,OAGpD,OAFAA,EAAQkB,QAAU,IAAI1B,KAAKQ,EAAQkB,SAEhCQ,KAAKC,MACCC,MAAM,iCAAkC,CAC7Ca,OAAQ,OACRC,KAAMC,KAAKC,UAAU5C,GACrB6C,QAAS,CAAE,eAAgB,sBAE5BhB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GAAK,OAAI,EAAKC,YAAYD,MAG5B,IAAIE,SAAQ,SAAAC,GACjB,EAAKC,SAAS5B,KAAKT,GACnBoC,EAAQpC,Q,oCAISiD,GAAmC,IAAD,OACrD,OAAGvB,KAAKC,MACCC,MAAM,oCAAD,OAAqCqB,IAChDpB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GAAK,OAAI,EAAKC,YAAYD,MAG5B,IAAIE,SAAQ,SAAAC,GAEjBA,EADgB,EAAKC,SAASW,QAAO,SAAAhD,GAAO,OAAIA,EAAQiB,KAAKiC,SAASD,Y,8BAM3DX,GACb,OAAoC,IAA7Ba,OAAOC,KAAKd,GAAMe,S,kCAGRpB,GACjBqB,QAAQrB,MAAMA,O,KAzGGR,EAEZY,SAAqBf,EAFTG,EAIZE,OAAkC4B,ECFpC,I,OC2BQC,EA1BwB,WAErC,IAAMnB,EDHmB,WAAO,IAAD,EACGnC,mBAAoB,IADvB,mBACtBmC,EADsB,KACZoB,EADY,KAShC,OANGC,qBAAU,WAENC,EAAgBC,cACf/B,MAAK,SAAAQ,GAAQ,OAAIoB,EAAYpB,QAC5B,IAEFA,ECNWwB,GAGjB,OACE,6BACA,wBAAIvD,UAAU,UAAd,WACA,yBAAKA,UAAU,aAEb,yBAAKA,UAAU,OAEZ+B,EAASjB,KAAK,SAAA0C,GAAG,OACf,kBAAC,EAAD,CAAazC,IAAKyC,EAAItD,GAAIR,QAAS8D,EAAK7D,YAAY,cAIvD,kBAAC,IAAD,CAAMK,UAAU,gEAChBM,MAAO,CAACmD,SAAU,QAASC,OAAQ,OAAQC,MAAO,QAASC,GAAG,gBAC9D,uBAAG5D,UAAU,kBAAb,WCmDO6D,EAlEwD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EAEtDlE,mBAAuB,MAF+B,mBAE7EF,EAF6E,KAEpEqE,EAFoE,KASpF,OALAX,qBAAU,WACRC,EAAgBW,YAAYF,EAAMG,OAAO/D,IACxCqB,MAAK,SAAA7B,GAAO,OAAIqE,EAAWrE,QACzB,CAACoE,EAAMG,OAAO/D,KAGjB,6BACIR,EACA,yBAAKM,UAAU,OACb,yBAAKA,UAAU,wBACb,wBAAIA,UAAU,iBAAkBN,EAAQiB,MACxC,yBAAKX,UAAU,kBACb,yBAAKA,UAAU,cACb,yBAAKQ,IAAKd,EAAQe,QAASC,IAAKhB,EAAQiB,KAAML,MAAO,CAAC4D,MAAO,QAASC,OAAQ,YAC9E,kBAAC,IAAD,CAAMP,GAAE,yBAAoBlE,EAAQQ,IAAMF,UAAU,yDAClD,uBAAGA,UAAU,kBAAb,UAGJ,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,gBACb,2BAAOA,UAAU,oBACf,+BACE,4BACE,mCACA,4BAAI,gCAAUN,EAAQiB,QAExB,4BACE,6CACA,4BAAI,gCAAUjB,EAAQuB,MAExB,4BACE,4CACA,4BAAI,gCAAUvB,EAAQwB,MAExB,4BACE,qCACA,4BACGxB,EAAQmB,MAAMC,KAAI,SAAAvB,GAAI,OACtB,0BAAMwB,IAAKxB,EAAMS,UAAWV,EAAWC,IAAQA,QAGpD,4BACE,mDACA,4BAAKP,EAAWU,EAAQkB,cAKhC,yBAAKZ,UAAU,eACb,kBAAC,IAAD,CAAM4D,GAAG,KAAT,eAOV,wBAAI5D,UAAU,UAAd,sCCtDOoE,EAbyB,WAEtC,OACE,yBAAKpE,UAAU,UACb,yBAAKQ,IAAI,iEAAiEE,IAAI,wBAC9E,8DACA,kBAAC,IAAD,CAAMkD,GAAG,IAAI5D,UAAU,oCAAvB,8B,eC0PSqE,EA1O+B,SAAC,GAA6B,IAA3B3E,EAA0B,EAA1BA,QAAS4E,EAAiB,EAAjBA,WAAiB,EAEhD1E,mBAAe,CACtCa,QAAS,CAAC8D,MAAO7E,EAAQe,SACzBE,KAAM,CAAC4D,MAAO7E,EAAQiB,KAAM6D,SAAS,GACrCvD,GAAK,CAACsD,MAAO7E,EAAQuB,GAAIuD,SAAS,GAClCtD,GAAK,CAACqD,MAAO7E,EAAQwB,GAAIsD,SAAS,GAClC3D,MAAQ,CAAC0D,MAAO7E,EAAQmB,MAAO2D,SAAS,KAP+B,mBAElEC,EAFkE,KAE5DC,EAF4D,KAUnE5E,EAAUC,cAOV4E,EAAU,SAACpF,GACX,OAAOkF,EAAK5D,MAAM0D,MAAM3B,SAASrD,IAGjCqF,EAAoB,SAACC,GACvB,IAAMC,EAAoBD,EAAEE,OAAOpE,KAC7BqE,EAAqBH,EAAEE,OAAOR,MAE9BU,EAAe,eAAKH,EAAa,CAACP,MAAOS,IAG/CN,EAAQ,eAAID,EAAL,GAAcQ,KAiCnBC,EAAY,WAChB,OAAQZ,GAGJa,EAAe,WACnB,IAAIC,EAAgBX,EAGpB,GAAGS,IAAY,CAIb,GAAIT,EAAKhE,QAAQ8D,MAAMc,WAHT,+DAG+BZ,EAAKhE,QAAQ8D,MAAMe,SAFpD,QAML,CACH,IAAML,EAAkB,CAACV,MAAQE,EAAKhE,QAAQ8D,MAAO5C,MAAM,GAAI6C,SAAS,GACxEY,EAAO,eAAOX,EAAP,GAAgB,CAAChE,QAASwE,QANyC,CAC1E,IACMA,EAAkB,CAACV,MAAQE,EAAKhE,QAAQ8D,MAAO5C,MAD5B,0BAC6C6C,SAAS,GAC/EY,EAAO,eAAOX,EAAP,GAAgB,CAAChE,QAASwE,KASvC,GAAI,gCAAuBM,KAAKd,EAAK9D,KAAK4D,OAInC,CACL,IAAMU,EAAkB,CAACV,MAAOE,EAAK9D,KAAK4D,MAAO5C,MAAO,GAAI6C,SAAS,GACrEY,EAAO,eAAOA,EAAP,GAAmB,CAACzE,KAAMsE,QANc,CAC/C,IACMA,EAAkB,CAACV,MAAOE,EAAK9D,KAAK4D,MAAO5C,MADxB,mCACyC6C,SAAS,GAC3EY,EAAO,eAAOA,EAAP,GAAmB,CAACzE,KAAMsE,IAMnC,GAAI,eAAeM,KAAKd,EAAKxD,GAAGsD,OAIzB,CACL,IAAMU,EAAkB,CAACV,MAAOE,EAAKxD,GAAGsD,MAAO5C,MAAO,GAAI6C,SAAS,GACnEY,EAAO,eAAOA,EAAP,GAAmB,CAACnE,GAAIgE,QANM,CACrC,IACMA,EAAkB,CAACV,MAAOE,EAAKxD,GAAGsD,MAAO5C,MADtB,+DACuC6C,SAAS,GACzEY,EAAO,eAAOA,EAAP,GAAmB,CAACnE,GAAIgE,IAMjC,GAAI,eAAeM,KAAKd,EAAKvD,GAAGqD,OAIzB,CACL,IAAMU,EAAkB,CAACV,MAAOE,EAAKvD,GAAGqD,MAAO5C,MAAO,GAAI6C,SAAS,GACnEY,EAAO,eAAOA,EAAP,GAAmB,CAAClE,GAAI+D,QANM,CACrC,IACMA,EAAkB,CAACV,MAAOE,EAAKvD,GAAGqD,MAAO5C,MADtB,2DACuC6C,SAAS,GACzEY,EAAO,eAAOA,EAAP,GAAmB,CAAClE,GAAI+D,IASjC,OAHAP,EAAQU,IAGuE,KAAtEA,EAAQzE,KAAK6D,SAAWY,EAAQnE,GAAGuD,SAAWY,EAAQlE,GAAGsD,UAG9DgB,EAAe,SAACjG,GAClB,OAA+B,IAA5BkF,EAAK5D,MAAM0D,MAAMxB,SAAgB4B,EAAQpF,OAGzCkF,EAAK5D,MAAM0D,MAAMxB,QAAU,IAAM4B,EAAQpF,KAW1CkG,EAAa,WACjBtE,EAAesE,WAAW/F,GACzB6B,MAAK,kBAAMzB,EAAQK,KAAR,iBAGRuF,EAAgB,WACpBvE,EAAeuE,cAAchG,GAC1B6B,MAAK,kBAAMzB,EAAQK,KAAR,oBAA0BT,EAAQQ,SAGlD,OACE,0BAAMyF,SAAU,SAAAd,GAAC,OAhGE,SAACA,GACpBA,EAAEe,iBACkBT,MAElBzF,EAAQe,QAAUgE,EAAKhE,QAAQ8D,MAC/B7E,EAAQiB,KAAO8D,EAAK9D,KAAK4D,MACzB7E,EAAQuB,GAAKwD,EAAKxD,GAAGsD,MACrB7E,EAAQwB,GAAKuD,EAAKvD,GAAGqD,MACrB7E,EAAQmB,MAAQ4D,EAAK5D,MAAM0D,MAC3BD,EAAWoB,IAAgBD,KAuFRI,CAAahB,KAChC,yBAAK7E,UAAU,OACb,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,kBACZsE,GACC,yBAAKtE,UAAU,cACb,yBAAKQ,IAAKd,EAAQe,QAASC,IAAKhB,EAAQiB,KAAML,MAAO,CAAC4D,MAAO,QAASC,OAAQ,YAC9E,0BAAMnE,UAAU,qDACd,uBAAGC,QAxBG,WACpBkB,EAAe2E,cAAcpG,GAC5B6B,MAAK,kBAAMzB,EAAQK,KAAR,iBAsB6BH,UAAU,kBAArC,YAIN,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,gBAEZkF,GAED,yBAAKlF,UAAU,cACX,2BAAO+F,QAAQ,WAAf,SACA,2BAAO7F,GAAG,UAAUS,KAAK,UAAUpB,KAAK,OAAOS,UAAU,eAAeuE,MAAOE,EAAKhE,QAAQ8D,MAAOyB,SAAU,SAAAnB,GAAC,OAAID,EAAkBC,MACnIJ,EAAKhE,QAAQkB,OACZ,yBAAK3B,UAAU,2BACZyE,EAAKhE,QAAQkB,QAOtB,yBAAK3B,UAAU,cACb,2BAAO+F,QAAQ,QAAf,OACA,2BAAO7F,GAAG,OAAOS,KAAK,OAAOpB,KAAK,OAAOS,UAAU,eAAeuE,MAAOE,EAAK9D,KAAK4D,MAAOyB,SAAU,SAAAnB,GAAC,OAAID,EAAkBC,MAC1HJ,EAAK9D,KAAKgB,OACT,yBAAK3B,UAAU,2BACZyE,EAAK9D,KAAKgB,QAKjB,yBAAK3B,UAAU,cACb,2BAAO+F,QAAQ,MAAf,gBACA,2BAAO7F,GAAG,KAAKS,KAAK,KAAKpB,KAAK,SAASS,UAAU,eAAeuE,MAAOE,EAAKxD,GAAGsD,MAAQyB,SAAU,SAAAnB,GAAC,OAAID,EAAkBC,MACvHJ,EAAKxD,GAAGU,OACP,yBAAK3B,UAAU,2BACZyE,EAAKxD,GAAGU,QAKf,yBAAK3B,UAAU,cACb,2BAAO+F,QAAQ,MAAf,gBACA,2BAAO7F,GAAG,KAAKS,KAAK,KAAKpB,KAAK,SAASS,UAAU,eAAeuE,MAAOE,EAAKvD,GAAGqD,MAAQyB,SAAU,SAAAnB,GAAC,OAAID,EAAkBC,MACvHJ,EAAKvD,GAAGS,OACP,yBAAK3B,UAAU,2BACZyE,EAAKvD,GAAGS,QAKf,yBAAK3B,UAAU,cACb,wCAhMQ,CACtB,SAAU,MAAO,MAAO,UAAW,SAAU,WAC7C,SAAU,YAAQ,MAAO,SAAU,OAgMdc,KAAI,SAAAvB,GAAI,OACb,yBAAKwB,IAAKxB,EAAMe,MAAO,CAAC2F,aAAc,SACpC,+BAEE,2BAAO/F,GAAIX,EAAMA,KAAK,WAAWS,UAAU,YAAYuE,MAAOhF,EAAM2G,QAASvB,EAAQpF,GAAOyG,SAAU,SAAAnB,GAAC,OAnL1G,SAACtF,EAAcsF,GAC9B,IACII,EADYJ,EAAEE,OAAOmB,QAMnBjB,EAAW,CAACV,MADeE,EAAK5D,MAAM0D,MAAM4B,OAAO,CAAC5G,KAKxD0F,EAAW,CAACV,MADeE,EAAK5D,MAAM0D,MAAM7B,QAAO,SAAC0D,GAAD,OAAyBA,IAAgB7G,MAI9FmF,EAAQ,eAAID,EAAL,GAAc,CAAC5D,MAAOoE,KAqKgGoB,CAAW9G,EAAMsF,IAAIyB,UAAWd,EAAajG,KAExJ,8BACE,uBAAGS,UAAWV,EAAWC,IAASA,WAS9C,yBAAKS,UAAU,sBAEb,4BAAQT,KAAK,SAASS,UAAU,OAAhC,kBCjNDuG,EA/BqD,SAAC,GAAiB,IAAdzC,EAAa,EAAbA,MAAa,EAErDlE,mBAAuB,MAF8B,mBAE5EF,EAF4E,KAEnEqE,EAFmE,KAiBnF,OALAX,qBAAU,WACRC,EAAgBW,YAAYF,EAAMG,OAAO/D,IACxCqB,MAAK,SAAA7B,GAAO,OAAIqE,EAAWrE,QAC3B,CAACoE,EAAMG,OAAO/D,KAGf,6BACIR,EACA,yBAAKM,UAAU,OACX,wBAAIA,UAAU,iBAAd,aAAuCN,EAAQiB,MAC/C,kBAAC,EAAD,CAAajB,QAASA,EAAS4E,YAAY,KAG/C,wBAAItE,UAAU,UAAd,sCClCawG,EAWjB,WACCtG,GAOE,IANFe,EAMC,uDANY,IACbC,EAKC,uDALY,GACbP,EAIC,uDAJc,MACfF,EAGC,uDAHiB,oEAClBI,EAEC,uDAFsB,CAAC,UACxBD,EACC,uDADe,IAAI1B,KACnB,yBAjBFgB,QAiBE,OAhBFe,QAgBE,OAfFC,QAeE,OAdFP,UAcE,OAbFF,aAaE,OAZFI,WAYE,OAXFD,aAWE,EAEDQ,KAAKlB,GAAKA,EACVkB,KAAKH,GAAKA,EACVG,KAAKF,GAAKA,EACVE,KAAKT,KAAOA,EACZS,KAAKX,QAAUA,EACfW,KAAKP,MAAQA,EACbO,KAAKR,QAAUA,GCLL6F,EAduB,WAAO,IAAD,EAE3B7G,oBAAiB,IAAIV,MAAOwH,WAAlCxG,EAFiC,sBAGzBN,mBAAkB,IAAI4G,EAAQtG,IAAtCyG,EAHiC,oBAKxC,OACI,yBAAK3G,UAAU,OACX,wBAAIA,UAAU,iBAAd,uBACI,kBAAC,EAAD,CAAaN,QAASiH,EAAMrC,YAAY,MCiBzCsC,EAzBgB,WAC9B,OACG,kBAAC,IAAD,KACE,6BAEE,6BACA,yBAAK5G,UAAU,oBACf,kBAAC,IAAD,CAAM4D,GAAG,IAAI5D,UAAU,qBAAvB,gBAIA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6G,OAAK,EAACC,KAAK,IAAIC,UAAW7D,IACjC,kBAAC,IAAD,CAAO2D,OAAK,EAACC,KAAK,YAAYC,UAAW7D,IACzC,kBAAC,IAAD,CAAO2D,OAAK,EAACC,KAAK,eAAeC,UAAWN,IAC5C,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,qBAAqBC,UAAWR,IAClD,kBAAC,IAAD,CAAOO,KAAK,gBAAgBC,UAAWlD,IACvC,kBAAC,IAAD,CAAOkD,UAAW3C,Q,eCrB5B4C,EAASC,OACT,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.ecca12eb.chunk.js","sourcesContent":["const formatDate = (date:Date = new Date()): string => {\r\n    return `${date.getDate()}/${date.getMonth()+1}/${date.getUTCFullYear()}`;\r\n}\r\n\r\nexport default formatDate;","const formatType = (type: string): string => {\r\n    let color: string;\r\n \r\n  switch (type) {\r\n    case 'Feu': \r\n      color = 'red lighten-1'; \r\n      break; \r\n    case 'Eau': \r\n      color = 'blue lighten-1'; \r\n      break; \r\n    case 'Plante': \r\n      color = 'green lighten-1'; \r\n      break; \r\n    case 'Insecte': \r\n      color = 'brown lighten-1'; \r\n      break; \r\n    case 'Normal': \r\n      color = 'grey lighten-3'; \r\n      break; \r\n    case 'Vol': \r\n      color = 'blue lighten-3'; \r\n      break; \r\n    case 'Poison': \r\n      color = 'deep-purple accent-1'; \r\n      break; \r\n    case 'Fée': \r\n      color = 'pink lighten-4'; \r\n      break; \r\n    case 'Psy': \r\n      color = 'deep-purple darken-2'; \r\n      break; \r\n    case 'Electrik': \r\n      color = 'lime accent-1'; \r\n      break; \r\n    case 'Combat': \r\n      color = 'deep-orange'; \r\n      break; \r\n    default: \r\n      color = 'grey'; \r\n      break; \r\n  }\r\n \r\n  return `chip ${color}`; // les couleurs et chip viennet de materialize. chip met la couleur du txt en noir\r\n}\r\n\r\nexport default formatType;","import React,{FunctionComponent, useState} from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport './pokemon-card.css';\r\nimport formatDate from '../helpers/format-date';\r\nimport formatType from '../helpers/format-type';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\ntype Props = {\r\n    pokemon: Pokemon,\r\n    bordelColor?: string\r\n};\r\n                                                        // valeur par défaut \r\nconst PokemonCard: FunctionComponent<Props> = ({pokemon, bordelColor = \"#009668\"}) => {\r\n\r\n    const [color, setColor] = useState<string>();\r\n    const history = useHistory();\r\n\r\n    const showBorderColor = () => {\r\n      setColor(bordelColor);\r\n    };\r\n\r\n    const HideBorderColor = () => {\r\n      setColor(\"#f5f5f5\");\r\n    };\r\n\r\n    const goToPokemon = (id:number) => {\r\n      history.push(`/pokemons/${id}`);\r\n    }\r\n\r\n    return (\r\n        <div className=\"col s6 m4\" onClick={()=> goToPokemon(pokemon.id)} onMouseEnter={showBorderColor}  onMouseLeave={HideBorderColor}>\r\n          <div className=\"card horizontal\" style={{borderColor: color}}>\r\n\r\n            <div className=\"card-image\"> \r\n              <img src={pokemon.picture} alt={pokemon.name}/>\r\n            </div>\r\n\r\n            <div className=\"card-stacked\">\r\n\r\n              <div className=\"card-content\">\r\n\r\n                <p>{pokemon.name}</p>\r\n                <p><small>{formatDate(pokemon.created)}</small></p>\r\n                {pokemon.types.map(type => (\r\n                  <span key={type} className={formatType(type)}>{type}</span>\r\n                ))}\r\n              </div>\r\n\r\n            </div>\r\n\r\n          </div> \r\n        </div>\r\n      );\r\n};\r\n\r\nexport default PokemonCard;","import Pokemon from './pokemon';\r\n  \r\nexport const POKEMONS: Pokemon[] = [\r\n {\r\n  id: 1,\r\n  name: \"Bulbizarre\",\r\n  hp: 25,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/001.png\",\r\n  types: [\"Plante\", \"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 2,\r\n  name: \"Salamèche\",\r\n  hp: 28,\r\n  cp: 6,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/004.png\",\r\n  types: [\"Feu\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 3,\r\n  name: \"Carapuce\",\r\n  hp: 21,\r\n  cp: 4,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/007.png\",\r\n  types: [\"Eau\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 4,\r\n  name: \"Aspicot\",\r\n  hp: 16,\r\n  cp: 2,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/013.png\",\r\n  types: [\"Insecte\", \"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 5,\r\n  name: \"Roucool\",\r\n  hp: 30,\r\n  cp: 7,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/016.png\",\r\n  types: [\"Normal\", \"Vol\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 6,\r\n  name: \"Rattata\",\r\n  hp: 18,\r\n  cp: 6,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/019.png\",\r\n  types: [\"Normal\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 7,\r\n  name: \"Piafabec\",\r\n  hp: 14,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/021.png\",\r\n  types: [\"Normal\", \"Vol\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 8,\r\n  name: \"Abo\",\r\n  hp: 16,\r\n  cp: 4,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/023.png\",\r\n  types: [\"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 9,\r\n  name: \"Pikachu\",\r\n  hp: 21,\r\n  cp: 7,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/025.png\",\r\n  types: [\"Electrik\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 10,\r\n  name: \"Sabelette\",\r\n  hp: 19,\r\n  cp: 3,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/027.png\",\r\n  types: [\"Normal\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 11,\r\n  name: \"Mélofée\",\r\n  hp: 25,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/035.png\",\r\n  types: [\"Fée\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 12,\r\n  name: \"Groupix\",\r\n  hp: 17,\r\n  cp: 8,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/037.png\",\r\n  types: [\"Feu\"],\r\n  created: new Date()\r\n }\r\n];\r\n \r\nexport default POKEMONS;","import Pokemon from \"../models/pokemon\";\r\nimport POKEMONS from \"../models/mock-pokemon\";\r\n  \r\nexport default class PokemonService {\r\n  \r\n  static pokemons:Pokemon[] = POKEMONS;\r\n  \r\n  static isDev = (!process.env.NODE_ENV || process.env.NODE_ENV === 'development');\r\n  \r\n  static getPokemons(): Promise<Pokemon[]> {\r\n    if(this.isDev) {\r\n      return fetch('http://localhost:3001/pokemons')\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {\r\n      resolve(this.pokemons);\r\n    });\r\n  }\r\n  \r\n  static getPokemon(id: number): Promise<Pokemon|null> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${id}`)\r\n      .then(response => response.json())\r\n      .then(data => this.isEmpty(data) ? null : data)\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      resolve(this.pokemons.find(pokemon => id === pokemon.id));\r\n    }); \r\n  }\r\n  \r\n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(pokemon),\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {\r\n      const { id } = pokemon;\r\n      const index = this.pokemons.findIndex(pokemon => pokemon.id === id);\r\n      this.pokemons[index] = pokemon;\r\n      resolve(pokemon);\r\n    }); \r\n  }\r\n  \r\n  static deletePokemon(pokemon: Pokemon): Promise<{}> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      const { id } = pokemon;\r\n      this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== id);\r\n      resolve({});\r\n    }); \r\n  }\r\n  \r\n  static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    pokemon.created = new Date(pokemon.created);\r\n  \r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(pokemon),\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      this.pokemons.push(pokemon);\r\n      resolve(pokemon);\r\n    }); \r\n  }\r\n  \r\n  static searchPokemon(term: string): Promise<Pokemon[]> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons?q=${term}`)\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      const results = this.pokemons.filter(pokemon => pokemon.name.includes(term));\r\n      resolve(results);\r\n    });\r\n  \r\n  }\r\n  \r\n  static isEmpty(data: Object): boolean {\r\n    return Object.keys(data).length === 0;\r\n  }\r\n  \r\n  static handleError(error: Error): void {\r\n    console.error(error);\r\n  }\r\n}","import {useEffect, useState} from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonServices from '../services/pokemon-services';\r\n// import POKEMONS from '../models/mock-pokemon'; // plus besoin de ça car API\r\n\r\nexport const usePokemons = () => {\r\n    const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n\r\n    useEffect(() => {\r\n            // setPokemons(POKEMONS);} // appel à l api maintenant ;) \r\n        PokemonServices.getPokemons()\r\n        .then(pokemons => setPokemons(pokemons));\r\n        },[]);\r\n\r\n return pokemons;\r\n}\r\n","import React, { FunctionComponent} from 'react';\r\nimport PokemonCard from '../components/pokemon-card';\r\nimport {usePokemons} from '../hooks/pokemon-hook';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nconst PokemonList: FunctionComponent = () =>{\r\n \r\n  const pokemons = usePokemons();\r\n\r\n  \r\n  return (\r\n    <div>\r\n    <h1 className=\"center\">Pokedex</h1>\r\n    <div className=\"container\">\r\n\r\n      <div className=\"row\">\r\n\r\n        {pokemons.map( pok => (\r\n           <PokemonCard key={pok.id} pokemon={pok} bordelColor=\"green\"/>\r\n        ) )}\r\n      \r\n      </div>\r\n        <Link className=\"btn-floating btn-large waves-effect waves-light red z-depth-3\"\r\n        style={{position: 'fixed', bottom: '25px', right: '25px'}} to=\"/pokemon/add\">\r\n        <i className=\"material-icons\">add</i>\r\n        </Link>\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n  \r\nexport default PokemonList;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps, Link } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\n//import POKEMONS from '../models/mock-pokemon';\r\nimport formatDate from '../helpers/format-date';\r\nimport formatType from '../helpers/format-type';\r\nimport PokemonServices from '../services/pokemon-services';\r\n  \r\ntype Params = { id: string };\r\n  \r\nconst PokemonsDetail: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\r\n\r\n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\r\n  \r\n  useEffect(() => {\r\n    PokemonServices.getPokemon(+match.params.id)\r\n    .then(pokemon => setPokemon(pokemon));\r\n    }, [match.params.id]);\r\n    \r\n  return (\r\n    <div>\r\n      { pokemon ? (\r\n        <div className=\"row\">\r\n          <div className=\"col s12 m8 offset-m2\"> \r\n            <h2 className=\"header center\">{ pokemon.name }</h2>\r\n            <div className=\"card hoverable\"> \r\n              <div className=\"card-image\">\r\n                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\r\n                <Link to={`/pokemons/edit/${pokemon.id}`} className=\"btn btn-floating halfway-fab waves-effect waves-light\">\r\n                  <i className=\"material-icons\">edit</i>\r\n                </Link>\r\n              </div>\r\n              <div className=\"card-stacked\">\r\n                <div className=\"card-content\">\r\n                  <table className=\"bordered striped\">\r\n                    <tbody>\r\n                      <tr> \r\n                        <td>Nom</td> \r\n                        <td><strong>{ pokemon.name }</strong></td> \r\n                      </tr>\r\n                      <tr> \r\n                        <td>Points de vie</td> \r\n                        <td><strong>{ pokemon.hp }</strong></td> \r\n                      </tr> \r\n                      <tr> \r\n                        <td>Dégâts</td> \r\n                        <td><strong>{ pokemon.cp }</strong></td> \r\n                      </tr> \r\n                      <tr> \r\n                        <td>Types</td> \r\n                        <td>\r\n                          {pokemon.types.map(type => (\r\n                           <span key={type} className={formatType(type)}>{type}</span>\r\n                          ))}</td> \r\n                      </tr> \r\n                      <tr> \r\n                        <td>Date de création</td> \r\n                        <td>{formatDate(pokemon.created)}</td> \r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n                <div className=\"card-action\">\r\n                  <Link to=\"/\">Retour</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <h4 className=\"center\">Aucun pokémon à afficher !</h4>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PokemonsDetail;","import React, { FunctionComponent } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n  \r\nconst PageNotFound: FunctionComponent = () => {\r\n  \r\n  return (\r\n    <div className=\"center\">\r\n      <img src=\"http://assets.pokemon.com/assets/cms2/img/pokedex/full/035.png\" alt=\"Page non trouvée\"/>\r\n      <h1>Hey, cette page n'existe pas !</h1> \r\n      <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\r\n        Retourner à l'accueil\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PageNotFound;","import React, { FunctionComponent, useState } from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport formatType from '../helpers/format-type';\r\nimport{useHistory} from 'react-router-dom';\r\nimport PokemonService from '../services/pokemon-services';\r\n  \r\ntype Props = {\r\n  pokemon: Pokemon,\r\n  isEditForm: boolean\r\n};\r\n\r\n  type Field = {\r\n    value?: any, \r\n    error?:string, \r\n    isValid?: boolean\r\n  }\r\n\r\n  type Form = {\r\n    picture: Field,\r\n    name: Field,\r\n    hp: Field,\r\n    cp: Field,\r\n    types: Field\r\n}\r\n  \r\nconst PokemonForm: FunctionComponent<Props> = ( {pokemon, isEditForm} ) => {\r\n  \r\n  const [form, setForm ] = useState<Form>({\r\n    picture: {value: pokemon.picture },\r\n    name: {value: pokemon.name, isValid: true}, \r\n    hp : {value: pokemon.hp, isValid: true},\r\n    cp : {value: pokemon.cp, isValid: true},\r\n    types : {value: pokemon.types, isValid: true}\r\n  });\r\n\r\n  const history = useHistory();\r\n\r\n  const types: string[] = [\r\n    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\r\n    'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\r\n  ];\r\n  \r\n  const hasType = (type: string) : boolean => {\r\n        return form.types.value.includes(type);\r\n  }\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const fieldName: string = e.target.name; // retrive the name of the object -> nom du champ\r\n      const fieldValue: string = e.target.value; // retrieve the value of the object -> nouvelle valeur du champ\r\n\r\n      const newField: Field = {[fieldName]:  {value: fieldValue}};\r\n      // on regroupe ses valeurs dans un nouvel objet\r\n\r\n      setForm({...form, ...newField});\r\n  }\r\n\r\n  const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>):void => {\r\n      const checked = e.target.checked;\r\n      let newField: Field; \r\n\r\n      // si user coche un type, on l'ajoute à la liste des types du pokemon\r\n      if(checked){\r\n            const newTypes: string[] = form.types.value.concat([type]);\r\n            newField = {value: newTypes};\r\n      } else {\r\n        // si user décoche une case, on le retire de la liste. \r\n        const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\r\n        newField = {value: newTypes};\r\n      }\r\n\r\n      setForm({...form, ...{types: newField}});\r\n  }\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const isFormValid = validateForm();\r\n    if(isFormValid){\r\n      pokemon.picture = form.picture.value;\r\n      pokemon.name = form.name.value; \r\n      pokemon.hp = form.hp.value;\r\n      pokemon.cp = form.cp.value;\r\n      pokemon.types = form.types.value;\r\n      isEditForm?updatePokemon():addPokemon();\r\n   }\r\n  }\r\n \r\n  const isAddForm = () => {\r\n    return !isEditForm;\r\n  }\r\n\r\n  const validateForm = () => {\r\n    let newForm: Form = form;\r\n\r\n    // validator url image\r\n    if(isAddForm()){\r\n      const start = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\r\n      const end = \".png\";\r\n\r\n      if(!form.picture.value.startsWith(start) || !form.picture.value.endsWith(end)){\r\n          const errorMsg: string = \"l'url n est pas valide!\";\r\n          const newField: Field = {value : form.picture.value, error: errorMsg, isValid: false};\r\n          newForm = {...form, ...{picture: newField}};\r\n      } else {\r\n          const newField: Field = {value : form.picture.value, error:'', isValid: true};\r\n          newForm = {...form, ...{picture: newField}};\r\n      }\r\n\r\n    }\r\n\r\n   // validator name\r\n    if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)){\r\n      const errorMsg: string = 'Le nom du pokémon est requis.';\r\n      const newField: Field = {value: form.name.value, error: errorMsg, isValid: false};\r\n      newForm = {...newForm, ...{name: newField}};\r\n    } else {\r\n      const newField: Field = {value: form.name.value, error: '', isValid: true};\r\n      newForm = {...newForm, ...{name: newField}};\r\n    }\r\n\r\n    if(!/^[0-9]{1,3}$/.test(form.hp.value)){\r\n      const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\r\n      const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\r\n      newForm = {...newForm, ...{hp: newField}};\r\n    } else {\r\n      const newField: Field = {value: form.hp.value, error: '', isValid: true};\r\n      newForm = {...newForm, ...{hp: newField}};\r\n    }\r\n\r\n    if(!/^[0-9]{1,2}$/.test(form.cp.value)){\r\n      const errorMsg: string = 'Les dégats du pokémons sont compris entre 0 et 99.';\r\n      const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\r\n      newForm = {...newForm, ...{cp: newField}};\r\n    } else {\r\n      const newField: Field = {value: form.cp.value, error: '', isValid: true};\r\n      newForm = {...newForm, ...{cp: newField}};\r\n    }\r\n\r\n    setForm(newForm);\r\n\r\n   // return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\r\n    return ((newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid) === true)?true:false; \r\n  }\r\n\r\n  const isTypesValid = (type: string):boolean => {\r\n      if(form.types.value.length === 1 && hasType(type)){\r\n          return false; \r\n      }\r\n      if(form.types.value.length >= 3 && !hasType(type)){\r\n        return false;\r\n      }\r\n      return true;\r\n  }\r\n\r\n  const deletePokemon = () =>  {\r\n    PokemonService.deletePokemon(pokemon)\r\n    .then(() => history.push(`/pokemons`));\r\n  }\r\n\r\n  const addPokemon = () => {\r\n    PokemonService.addPokemon(pokemon)\r\n    .then(() => history.push(`/pokemons`));\r\n  }\r\n\r\n  const updatePokemon = () => {\r\n    PokemonService.updatePokemon(pokemon)\r\n      .then(() => history.push(`/pokemons/${pokemon.id}`));\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={e => handleSubmit(e)}>\r\n      <div className=\"row\">\r\n        <div className=\"col s12 m8 offset-m2\">\r\n          <div className=\"card hoverable\"> \r\n            {isEditForm && (\r\n              <div className=\"card-image\">\r\n                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\r\n                <span className=\"btn-floating halfway-fab waves-effect waves-light\">\r\n                  <i onClick={deletePokemon} className=\"material-icons\">delete</i>\r\n               </span>\r\n              </div>\r\n            )}\r\n            <div className=\"card-stacked\">\r\n              <div className=\"card-content\">\r\n\r\n                {isAddForm && (\r\n                  /* Pokemon picture */\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"picture\">Image</label>\r\n                    <input id=\"picture\" name=\"picture\" type=\"text\" className=\"form-control\" value={form.picture.value} onChange={e => handleInputChange(e)}></input>\r\n                    {form.picture.error &&\r\n                      <div className=\"card-panel red accent-1\">\r\n                        {form.picture.error}\r\n                      </div>\r\n                    }\r\n                </div>\r\n               )}\r\n\r\n                {/* Pokemon name */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"name\">Nom</label>\r\n                  <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\r\n                  {form.name.error &&\r\n                    <div className=\"card-panel red accent-1\">\r\n                      {form.name.error}\r\n                    </div>\r\n                  }\r\n                </div>\r\n                {/* Pokemon hp */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"hp\">Point de vie</label>\r\n                  <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value}  onChange={e => handleInputChange(e)}></input>\r\n                  {form.hp.error &&\r\n                    <div className=\"card-panel red accent-1\">\r\n                      {form.hp.error}\r\n                    </div>\r\n                  }\r\n                </div>\r\n                {/* Pokemon cp */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"cp\">Dégâts</label>\r\n                  <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value}  onChange={e => handleInputChange(e)}></input>\r\n                  {form.cp.error &&\r\n                    <div className=\"card-panel red accent-1\">\r\n                      {form.cp.error}\r\n                    </div>\r\n                  }\r\n                </div>\r\n                {/* Pokemon types */}\r\n                <div className=\"form-group\">\r\n                  <label>Types</label>\r\n\r\n                  {types.map(type => (\r\n                    <div key={type} style={{marginBottom: '10px'}}>\r\n                      <label>\r\n\r\n                        <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} checked={hasType(type)} onChange={e => selectType(type, e)} disabled={!isTypesValid(type)}></input>\r\n                        \r\n                        <span>\r\n                          <p className={formatType(type)}>{ type }</p>\r\n                        </span>\r\n\r\n                      </label>\r\n                    </div>\r\n                  ))}\r\n\r\n                </div>\r\n              </div>\r\n              <div className=\"card-action center\">\r\n                {/* Submit button */}\r\n                <button type=\"submit\" className=\"btn\">Valider</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n   \r\nexport default PokemonForm;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport PokemonForm from '../components/pokemon-form';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonServices from '../services/pokemon-services';\r\n\r\ntype Params = { id: string };\r\n\r\n  \r\nconst PokemonEdit: FunctionComponent<RouteComponentProps<Params>> = ( { match } ) => {\r\n    \r\n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\r\n  \r\n  // useEffect(() => {\r\n  //   POKEMONS.forEach(pokemon => {\r\n  //     if (match.params.id === pokemon.id.toString()) {\r\n  //       setPokemon(pokemon);\r\n  //     }\r\n  //   })\r\n  // }, [match.params.id]);\r\n\r\n  useEffect(() => {\r\n    PokemonServices.getPokemon(+match.params.id)\r\n    .then(pokemon => setPokemon(pokemon));\r\n  }, [match.params.id]);\r\n    \r\n  return (\r\n    <div>\r\n      { pokemon ? (\r\n        <div className=\"row\">\r\n            <h2 className=\"header center\">Éditer { pokemon.name }</h2>\r\n            <PokemonForm pokemon={pokemon} isEditForm={true}></PokemonForm>\r\n        </div>\r\n      ) : (\r\n        <h4 className=\"center\">Aucun pokémon à afficher !</h4>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PokemonEdit;","export default class Pokemon {\r\n    // 1. Typage des propiétés d'un pokémon.\r\n    id: number;\r\n    hp: number;\r\n    cp: number;\r\n    name: string;\r\n    picture: string;\r\n    types: Array<string>;\r\n    created: Date;\r\n    \r\n    // 2. Définition des valeurs par défaut des propriétés d'un pokémon.\r\n    constructor(\r\n     id: number,\r\n     hp: number = 100,\r\n     cp: number = 10,\r\n     name: string = '...',\r\n     picture: string = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/XXX.png',\r\n     types: Array<string> = ['Normal'],\r\n     created: Date = new Date()\r\n    ) {\r\n     // 3. Initialisation des propiétés d'un pokémons.\r\n     this.id = id;\r\n     this.hp = hp;\r\n     this.cp = cp;\r\n     this.name = name;\r\n     this.picture = picture;\r\n     this.types = types;\r\n     this.created = created;\r\n    }\r\n   }","import React, { FunctionComponent, useState } from 'react';\r\nimport PokemonForm from '../components/pokemon-form';\r\nimport Pokemon from '../models/pokemon';\r\n\r\n\r\ntype Params = { id: string };\r\n\r\n  \r\nconst PokemonAdd: FunctionComponent = () => {\r\n    \r\n    const [id] = useState<number>(new Date().getTime());\r\n    const [poke] = useState<Pokemon>(new Pokemon(id));\r\n  \r\n    return (\r\n        <div className=\"row\">\r\n            <h2 className=\"header center\">Ajouter un pokemon </h2>\r\n                <PokemonForm pokemon={poke} isEditForm={false}></PokemonForm>\r\n        </div>\r\n    );\r\n\r\n}\r\n  \r\nexport default PokemonAdd;","import React, {FunctionComponent} from 'react';\r\nimport PokemonList from './pages/pokemon-list';\r\nimport {BrowserRouter as Router, Switch,Route, Link} from 'react-router-dom';\r\nimport PokemonsDetail from './pages/pokemon-detail';\r\nimport PageNotFound from './pages/page-not-found';\r\nimport PokemonEdit from './pages/pokemon-edit';\r\nimport PokemonAdd from './pages/pokemon-add';\r\n\r\nconst App: FunctionComponent = () => {\r\n return (\r\n    <Router>\r\n      <div>\r\n        {/* la bare de navigation commune à toutes les pages*/ }\r\n        <nav>\r\n        <div className=\"nav-wrapper teal\">\r\n        <Link to=\"/\" className=\"brand-logo center\">Pokédex</Link>\r\n          </div>\r\n        </nav>\r\n        {/*Le gestionnaire des routes de notre appli*/}\r\n        <Switch>\r\n          <Route exact path=\"/\" component={PokemonList}/>\r\n          <Route exact path=\"/pokemons\" component={PokemonList}/>\r\n          <Route exact path=\"/pokemon/add\" component={PokemonAdd}/>\r\n          <Route exact path=\"/pokemons/edit/:id\" component={PokemonEdit}/>\r\n          <Route path=\"/pokemons/:id\" component={PokemonsDetail}/>\r\n          <Route component={PageNotFound}/>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n    \r\n )\r\n}\r\n\r\nexport default App; \r\n\r\n","import React from 'react';\r\nimport App from './App';\r\nimport ReactDOM from 'react-dom';\r\n\r\nReactDOM.render(\r\n<App />,\r\ndocument.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}
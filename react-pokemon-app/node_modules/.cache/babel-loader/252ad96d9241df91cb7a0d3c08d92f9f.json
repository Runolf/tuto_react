{"ast":null,"code":"import POKEMONS from \"../models/mock-pokemon\";\nexport default class PokemonService {\n  static getPokemons() {\n    if (this.isDev) {\n      return fetch('http://localhost:3001/pokemons').then(response => response.json()).catch(error => this.handleError(error));\n    }\n\n    return new Promise(resolve => {\n      resolve(this.pokemons);\n    });\n  }\n\n  static getPokemon(id) {\n    if (this.isDev) {\n      return fetch(`http://localhost:3001/pokemons/${id}`).then(response => response.json()).then(data => this.isEmpty(data) ? null : data).catch(error => this.handleError(error));\n    }\n\n    return new Promise(resolve => {\n      resolve(this.pokemons.find(pokemon => id === pokemon.id));\n    });\n  }\n\n  static updatePokemon(pokemon) {\n    if (this.isDev) {\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n        method: 'PUT',\n        body: JSON.stringify(pokemon),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).catch(error => this.handleError(error));\n    }\n\n    return new Promise(resolve => {\n      const {\n        id\n      } = pokemon;\n      const index = this.pokemons.findIndex(pokemon => pokemon.id === id);\n      this.pokemons[index] = pokemon;\n      resolve(pokemon);\n    });\n  }\n\n  static deletePokemon(pokemon) {\n    if (this.isDev) {\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).catch(error => this.handleError(error));\n    }\n\n    return new Promise(resolve => {\n      const {\n        id\n      } = pokemon;\n      this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== id);\n      resolve({});\n    });\n  }\n\n  static addPokemon(pokemon) {\n    pokemon.created = new Date(pokemon.created);\n\n    if (this.isDev) {\n      return fetch(`http://localhost:3001/pokemons`, {\n        method: 'POST',\n        body: JSON.stringify(pokemon),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).catch(error => this.handleError(error));\n    }\n\n    return new Promise(resolve => {\n      this.pokemons.push(pokemon);\n      resolve(pokemon);\n    });\n  }\n\n  static searchPokemon(term) {\n    if (this.isDev) {\n      return fetch(`http://localhost:3001/pokemons?q=${term}`).then(response => response.json()).catch(error => this.handleError(error));\n    }\n\n    return new Promise(resolve => {\n      const results = this.pokemons.filter(pokemon => pokemon.name.includes(term));\n      resolve(results);\n    });\n  }\n\n  static isEmpty(data) {\n    return Object.keys(data).length === 0;\n  }\n\n  static handleError(error) {\n    console.error(error);\n  }\n\n}\nPokemonService.pokemons = POKEMONS;\nPokemonService.isDev = !process.env.NODE_ENV || process.env.NODE_ENV === 'development';","map":{"version":3,"sources":["C:/Users/stagiaire02/source/repos/tuto_react/react-pokemon-app/src/services/pokemon-services.ts"],"names":["POKEMONS","PokemonService","getPokemons","isDev","fetch","then","response","json","catch","error","handleError","Promise","resolve","pokemons","getPokemon","id","data","isEmpty","find","pokemon","updatePokemon","method","body","JSON","stringify","headers","index","findIndex","deletePokemon","filter","addPokemon","created","Date","push","searchPokemon","term","results","name","includes","Object","keys","length","console","process","env","NODE_ENV"],"mappings":"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","sourcesContent":["import Pokemon from \"../models/pokemon\";\r\nimport POKEMONS from \"../models/mock-pokemon\";\r\n  \r\nexport default class PokemonService {\r\n  \r\n  static pokemons:Pokemon[] = POKEMONS;\r\n  \r\n  static isDev = (!process.env.NODE_ENV || process.env.NODE_ENV === 'development');\r\n  \r\n  static getPokemons(): Promise<Pokemon[]> {\r\n    if(this.isDev) {\r\n      return fetch('http://localhost:3001/pokemons')\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {\r\n      resolve(this.pokemons);\r\n    });\r\n  }\r\n  \r\n  static getPokemon(id: number): Promise<Pokemon|null> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${id}`)\r\n      .then(response => response.json())\r\n      .then(data => this.isEmpty(data) ? null : data)\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      resolve(this.pokemons.find(pokemon => id === pokemon.id));\r\n    }); \r\n  }\r\n  \r\n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(pokemon),\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {\r\n      const { id } = pokemon;\r\n      const index = this.pokemons.findIndex(pokemon => pokemon.id === id);\r\n      this.pokemons[index] = pokemon;\r\n      resolve(pokemon);\r\n    }); \r\n  }\r\n  \r\n  static deletePokemon(pokemon: Pokemon): Promise<{}> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      const { id } = pokemon;\r\n      this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== id);\r\n      resolve({});\r\n    }); \r\n  }\r\n  \r\n  static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    pokemon.created = new Date(pokemon.created);\r\n  \r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(pokemon),\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      this.pokemons.push(pokemon);\r\n      resolve(pokemon);\r\n    }); \r\n  }\r\n  \r\n  static searchPokemon(term: string): Promise<Pokemon[]> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons?q=${term}`)\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      const results = this.pokemons.filter(pokemon => pokemon.name.includes(term));\r\n      resolve(results);\r\n    });\r\n  \r\n  }\r\n  \r\n  static isEmpty(data: Object): boolean {\r\n    return Object.keys(data).length === 0;\r\n  }\r\n  \r\n  static handleError(error: Error): void {\r\n    console.error(error);\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}